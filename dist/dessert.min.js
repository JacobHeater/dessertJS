(function () {

    'use strict';

    var EVENT_HELPER = {
        initHashChange: initHashChange
    };

    define('helpers/event-helper',main);

    function main() {
        return EVENT_HELPER;
    }

    function initHashChange(callback) {
        window.addEventListener('hashchange', callback);
    }
})();
/*!

==========================================
===============             ==============
=============== promise.js  ==============
===============             ==============
==========================================

https://github.com/JacobHeater/JSHelpers

MIT License

Copyright (c) 2017 Jacob Heater

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

(function () {

    'use strict';

    if (typeof define === 'function' && define.amd) {
        define('helpers/promise',[],function promiseModule() {
            return $Promise;
        });
    } else if (typeof module !== 'undefined') {
        module.exports = $Promise;
    } else if (typeof window !== 'undefined') {
        window.$Promise = $Promise;
    }

    /**
     * A prototype to deal with asynchronous operations by providing a 
     * simple API that can be used to wait for the asynchronous operation
     * to complete.
     * 
     * @class
     * 
     * @classdesc
     * 
     * The $Promise class is a simple class that can be used to allow users
     * to wait for an asynchronous operation to complete, and be notified of
     * the success or failure of that operation. A simple example usage of 
     * the $Promise prototype can be found below.
     * 
     * ```javascript
     * 
     * var promise = asyncAction(function() {
     *     return "Hello, world!";
     * });
     * 
     * promise.then(function(msg) {
     *     console.assert(msg === "Hello, world!");
     * });
     * 
     * function asyncAction(action) {
     *     const promise = new $Promise();
     *      
     *     setTimeout(function() {
     *         try {
     *             const val = action();
     *             promise.resolve(val);
     *         } catch (err) {
     *             promise.reject(err);
     *         }
     *     }, 0);
     * 
     *     return promise;
     * }
     * 
     * ```
     */
    function $Promise() {
        //The callstack for .then()
        var callstack = [];
        //The callstack for .fail()
        var errorHandlers = [];
        //The callstack for .always()
        var alwaysHandlers = [];
        //When pending is true, that means the promise has not been resolved.
        var pending = true;

        /**
         * Adds a callback to the callstack for when the $Promise has been
         * resolved, as long as the promise has not already been resolved.
         * 
         * @param {Function} action The callback to add to the callstack.
         * @return {$Promise} The current $Promise instance.
         */
        this.then = function then(action) {
            pushWhen(callstack, action);
            return this; //Chainable API
        };

        /**
         * Adds an error handler to the error handler callstack as long as
         * the $Promise has not already been resolved.
         * 
         * @param {Function} action The error handler to add to the callstack.
         * @return {$Promise} The current $Promise instance.
         */
        this.fail = function fail(action) {
            pushWhen(errorHandlers, action);
            return this; //Chainable API
        };

        /**
         * Adds a callback to a callstack that will always be triggered
         * as long as the $Promise has not been resolved, regardless of
         * whether the promise has been rejected or not.
         * 
         * @param {Function} action The callback to add to the callstack.
         * @return {$Promise} The current $Promise instance.
         */
        this.always = function always(action) {
            pushWhen(alwaysHandlers, action);
            return this; //Chainable API
        };

        /**
         * Notifies the $Promise that the asynchronous operation has completed
         * and the callstack needs to be iterated to notify all listeners. The
         * arguments that are given to the .resolve() function will be passed along
         * to all callbacks in the callstack.
         * 
         * @return {$Promise} The current $Promise instance.
         */
        this.resolve = function notify() {
            if (pending) {
                pending = false;
                var args = arguments;

                //Iterate over the callstack and pass along all arguments to each function.
                iterateStack(callstack, function (fn) {
                    fn.apply(null, args);
                });

                //Iterate over the always callstack and pass along all arguments to each function.
                iterateStack(alwaysHandlers, function (fn) {
                    fn.apply(null, args);
                });
            }

            return this; //Chainable API
        };

        /**
         * Notifies the $Promise that the asynchronous operation has completed,
         * but something went wrong and there has been an error. The arguemnts 
         * that are passed into the .reject() function will be passed along to all
         * callbacks in the error callstack and all always callbacksl.
         * 
         * @return {$Promise} The current $Promise instance.
         */
        this.reject = function () {
            if (pending) {
                pending = false;
                var args = arguments;

                //Iterate over all of the error handlers and pass along the arguments to those
                //functions.
                iterateStack(errorHandlers, function (fn) {
                    fn.apply(null, args);
                });

                //Iterate over all of the always handlers and pass along the arguments to those
                //functions.
                iterateStack(alwaysHandlers, function (fn) {
                    fn.apply(null, args);
                });
            }

            return this; //Chainable API
        };

        /**
         * Pushes the given function to the array as long as the
         * current $Promise has not been resolved, and the given
         * arr parameter is an Array instance.
         * 
         * @param {Function[]} arr The callstack to push to.
         * @param {Function} action The callback to push to the callstack. 
         */
        function pushWhen(arr, action) {
            //action must be a function and the $Promise must not have been
            //resolved. Duck type the array.
            if (isFunction(action) && pending && arr && arr.push) {
                arr.push(action);
            }
        }
    }

    /**
     * A simple helper for type checking if the given 
     * object is a function.
     * 
     * @param {Function} fn The object to check.
     */
    function isFunction(fn) {
        return typeof fn === 'function';
    }

    /**
     * Iterates the given callstack and passes back the
     * given function in the array to the provided
     * action callback. This can be cancelled at any time
     * granted the action callback returns the value `false`.
     * 
     * @param {Function[]} stack The callstack to iterate.
     * @param {Function} action The callback to pass the function to.
     */
    function iterateStack(stack, action) {
        while (stack.length) {
            //We need to treat this like a stack, so we'll use the pop
            //method to take the last item out of the array, or off the
            //top of the stack. This is a last-in-first-out operation.
            var fn = stack.pop();
            //If the action callback gives back a value of false, then
            //we'll need to break out the loop.
            var ret = action(fn);

            if (ret === false) {
                break;
            }
        }
    }
})();
(function () {

    'use strict';

    var URL_HELPER = {
        addQueryString: addQueryString,
        queryStringToHash: queryStringToHash
    };

    define('helpers/url-helper',main);

    function main() {
        return URL_HELPER;
    }

    function addQueryString(string, queryHash) {
        if (string && queryHash) {
            if (!hasQueryString(string)) {
                string += '?';
            }

            string += Object.keys(queryHash).map(function (k) {
                return k + '=' + queryHash[k];
            }).reduce(function (c, n) {
                return c + '&' + n;
            });

            return string;
        }
        return string;
    }

    function queryStringToHash(string) {
        if (hasQueryString(string)) {
            var hash = {};
            var querySide = string.split('?')[1];
            var splitByPairs = querySide.split('&');
            var keyValuePairs = splitByPairs.map(function (p) {
                return p.split('=');
            });
            keyValuePairs.forEach(function (kvp) {
                return hash[kvp[0]] = kvp[1];
            });
            return hash;
        }
        return string;
    }

    function hasQueryString(string) {
        return (/\?/g.test(string)
        );
    }
})();
(function () {

    'use strict';

    var AJAX = {
        get: get
    };
    var STATUS_OK = 200;

    var $Promise;
    var UrlHelper;

    define('helpers/ajax-helper',['helpers/promise', 'helpers/url-helper'], main);

    function main(_Promise, $UrlHelper) {
        $Promise = _Promise;
        UrlHelper = $UrlHelper;

        return AJAX;
    }

    function get(url) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return XHR(Object.assign({
            method: 'GET',
            url: url
        }, options));
    }

    function XHR(options) {
        var xhr = new XMLHttpRequest();
        var promise = new $Promise();
        var config = Object.assign({
            url: '',
            method: '',
            data: null,
            cache: false
        }, options);

        if (!config.cache) {
            config.url = UrlHelper.addQueryString(config.url, {
                noCache: Math.floor(Math.random() * 9999999999) + 1
            });
        }

        xhr.addEventListener('error', function (e) {
            return promise.reject(e);
        });

        xhr.addEventListener('load', function (e) {
            return xhr.status === STATUS_OK ? promise.resolve(/.json/.test(config.url) ? tryAsJson(xhr.responseText) : xhr.responseText) : promise.reject(xhr);
        });

        xhr.timeout = 60000;
        xhr.open(config.method, config.url, true);

        if (config.method === 'POST') {
            xhr.send(config.data);
        } else {
            xhr.send();
        }

        return promise;
    }

    function tryAsJson(responseText) {
        try {
            return JSON.parse(responseText);
        } catch (e) {
            return responseText;
        }
    }
})();
(function () {

    'use strict';

    var HELPER = {
        addReadOnlyProperties: addReadOnlyProperties,
        addReadOnlyProperty: addReadOnlyProperty
    };

    define('helpers/property-helper',main);

    function main() {
        return HELPER;
    }

    function addReadOnlyProperties(obj, props) {
        for (var i = 0; i < props.length; i++) {
            var prop = props[i];

            addReadOnlyProperty(obj, prop.name, prop.value);
        }
    }

    function addReadOnlyProperty(obj, name, value) {
        Object.defineProperty(obj, name, {
            writable: false,
            value: value
        });
    }
})();
(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    define('helpers/dom-helper',main);

    function main() {
        return DomHelper;
    }

    var DomHelper = function () {
        function DomHelper() {
            _classCallCheck(this, DomHelper);
        }

        _createClass(DomHelper, null, [{
            key: 'createDocFrag',
            value: function createDocFrag(string) {
                return document.createRange().createContextualFragment(string);
            }
        }, {
            key: 'emptyElement',
            value: function emptyElement(element) {
                if (element && element.hasChildNodes()) {
                    while (element.lastChild) {
                        element.removeChild(element.lastChild);
                    }
                }
            }
        }]);

        return DomHelper;
    }();
})();
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    define('helpers/type-helper',main);

    function main() {
        return TypeHelper;
    }

    var TypeHelper = function () {
        function TypeHelper() {
            _classCallCheck(this, TypeHelper);
        }

        _createClass(TypeHelper, null, [{
            key: 'isFunction',
            value: function isFunction(fn) {
                return typeof fn === 'function';
            }
        }, {
            key: 'isObject',
            value: function isObject(obj) {
                return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null && !Array.isArray(obj);
            }
        }]);

        return TypeHelper;
    }();
})();
(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    define('helpers/array-helper',main);

    function main() {
        return ArrayHelper;
    }

    var ArrayHelper = function () {
        function ArrayHelper() {
            _classCallCheck(this, ArrayHelper);
        }

        _createClass(ArrayHelper, null, [{
            key: 'objectValues',
            value: function objectValues(obj) {
                return Object.keys(obj).map(function (k) {
                    return obj[k];
                });
            }
        }, {
            key: 'enumerate',
            value: function enumerate(enumerable, callback) {
                if (Array.isArray(enumerable) || 'length' in enumerable) {
                    for (var i = 0; i < enumerable.length; i++) {
                        callback(enumerable[i], i);
                    }
                }
            }
        }, {
            key: 'remove',
            value: function remove(enumerable, callback) {
                if (Array.isArray(enumerable)) {
                    var match = enumerable.find(callback);
                    var idx = enumerable.indexOf(match);
                    enumerable.splice(idx, 1);
                }
            }
        }]);

        return ArrayHelper;
    }();
})();
(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var PropertyHelper;
    var ArrayHelper;

    define('dessert.controller',['helpers/property-helper', 'helpers/array-helper'], main);

    function main($PropertyHelper, $ArrayHelper) {

        PropertyHelper = $PropertyHelper;
        ArrayHelper = $ArrayHelper;

        return Controller;
    }

    var Controller = function () {
        function Controller(name, init) {
            _classCallCheck(this, Controller);

            PropertyHelper.addReadOnlyProperties(this, [{
                name: 'name',
                value: name
            }, {
                name: 'init',
                value: init
            }, {
                name: 'components',
                value: {}
            }]);

            addStateMethods(this);
        }

        _createClass(Controller, [{
            key: 'registerComponent',
            value: function registerComponent(component) {
                this.components[component.id] = component;
            }
        }, {
            key: 'deRegisterComponent',
            value: function deRegisterComponent(component) {
                delete this.components[component.id];
            }
        }, {
            key: 'destroy',
            value: function destroy() {
                var components = ArrayHelper.objectValues(this.components());

                components.forEach(function (c) {
                    return c.destroy();
                });
            }
        }]);

        return Controller;
    }();

    function addStateMethods(instance) {

        PropertyHelper.addReadOnlyProperties(instance, [{
            name: 'state',
            value: {}
        }]);
    }
})();
(function () {

    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var PropertyHelper;

    define('dessert.route',['helpers/property-helper'], main);

    function main($PropertyHelper) {

        PropertyHelper = $PropertyHelper;

        return Route;
    }

    var Route = function Route(path, controller, view) {
        _classCallCheck(this, Route);

        PropertyHelper.addReadOnlyProperties(this, [{
            name: 'path',
            value: path
        }, {
            name: 'controller',
            value: controller
        }, {
            name: 'view',
            value: view
        }]);
    };
})();
(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Route;

    define('dessert.routemanager',['dessert.route'], main);

    function main($Route) {
        Route = $Route;

        return RouteManager;
    }

    var RouteManager = function () {
        function RouteManager() {
            _classCallCheck(this, RouteManager);

            var ROUTES = {};

            setRouteFunctions(this, ROUTES);
        }

        _createClass(RouteManager, null, [{
            key: 'hash',
            get: function get() {
                return window.location.hash;
            }
        }, {
            key: 'cleanHash',
            get: function get() {
                return this.hash.replace('#', '').replace(/\:.*/g, '');
            }
        }]);

        return RouteManager;
    }();

    function setRouteFunctions(instance, routes) {
        instance.getRoute = function (path) {
            return routes[path];
        };

        instance.route = function routeFactory(path, controllerName, view) {
            var route = routes[path];

            if (!route) {
                route = new Route(path, controllerName, view);
                routes[path] = route;
            }

            return route;
        };

        instance.clearRoute = function (path) {
            return delete routes[path];
        };
    }
})();
(function () {

    'use strict';

    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    define('dessert.httphandler',main);

    function main() {
        return HttpHandler;
    }

    var HttpHandler = function HttpHandler() {
        _classCallCheck(this, HttpHandler);

        var HANDLERS = {};

        addHandlerFunctions(this, HANDLERS);
    };

    function addHandlerFunctions(instance, handlers) {
        instance.addHandler = function addHandler(code, handler) {
            var cache = handlers[code];

            if (!cache) {
                cache = [];
                handlers[code] = cache;
            }

            cache.push(handler);
        };

        instance.getHandlers = function (code) {
            return handlers[code] || [];
        };

        instance.fireHandlers = function (code, args) {
            return instance.getHandlers(code).forEach(function (h) {
                return h.apply(undefined, _toConsumableArray(args));
            });
        };
    }
})();
(function () {

    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    define('dessert.resourcerequest',main);

    function main() {
        return ResourceRequest;
    }

    var ResourceRequest = function ResourceRequest(name) {
        _classCallCheck(this, ResourceRequest);

        Object.assign(this, {
            get name() {
                return name;
            }
        });
    };
})();
(function () {

    'use strict';

    var RENDERING = {
        renderComponents: renderComponents
    };

    var ArrayHelper;
    var dom;
    var PropertyHelper;
    var ResourceRequest;

    define('dessert.rendering',['helpers/array-helper', 'helpers/dom-helper', 'helpers/property-helper', 'dessert.resourcerequest'], main);

    function main($ArrayHelper, $DomHelper, $PropertyHelper, $ResourceRequest) {

        ArrayHelper = $ArrayHelper;
        dom = $DomHelper;
        PropertyHelper = $PropertyHelper;
        ResourceRequest = $ResourceRequest;

        return RENDERING;
    }

    function renderComponents(app, page, components, controller) {
        var componentsArr = ArrayHelper.objectValues(components);

        componentsArr.forEach(function (c) {
            var domElems = document.querySelectorAll(c.name);

            ArrayHelper.enumerate(domElems, function (elem) {
                var instance = new c(app, controller.state, elem, elem.getAttribute('id'));
                var html = instance.render();
                if (html instanceof ResourceRequest) {
                    var resource = app.resources()[html.name];
                    if (resource) {
                        html = resource.content;
                    } else {
                        html = '<span style="display: none;">resource not found</span>';
                    }
                }
                var componentFrag = dom.createDocFrag(html);
                instance.init(componentFrag);

                controller.registerComponent(instance);

                elem.parentNode.replaceChild(componentFrag, elem);
            });
        });
    }
})();
(function () {

    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var PropertyHelper;

    define('dessert.resource',['helpers/property-helper'], main);

    function main($PropertyHelper) {

        PropertyHelper = $PropertyHelper;

        return Resource;
    }

    var Resource = function Resource(name, path, content) {
        _classCallCheck(this, Resource);

        PropertyHelper.addReadOnlyProperties(this, [{
            name: 'name',
            value: name
        }, {
            name: 'content',
            value: content
        }, {
            name: 'path',
            value: path
        }]);
    };
})();
(function () {

    'use strict';

    var ajax;
    var $Promise;
    var Resource;

    define('dessert.resourcemanager',['helpers/ajax-helper', 'helpers/promise', 'dessert.resource'], main);

    function main($ajax, $$Promise, $Resource) {

        ajax = $ajax;
        $Promise = $$Promise;
        Resource = $Resource;

        return {
            loadResources: loadResources
        };
    }

    function loadResources(res) {
        var prom = new $Promise();

        var resKeys = Object.keys(res);
        var idx = 0;
        var path = '';
        var name = '';
        var loadResource = function loadResource(i) {
            if (i < resKeys.length) {
                name = resKeys[i];
                path = res[name];
                if (path instanceof Resource) {
                    setTimeout(function () {
                        i++;
                        loadResource(i);
                    }, 0);
                } else {
                    ajax.get(path).then(function (content) {
                        res[name] = new Resource(name, path, content);
                        i++;
                        loadResource(i);
                    });
                }
            } else {
                prom.resolve();
            }
        };

        loadResource(idx);

        return prom;
    }
})();
(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Controller;
    var PropertyHelper;
    var RouteManager;
    var ajax;
    var dom;
    var HttpHandler;
    var Rendering;
    var TypeHelper;
    var ResourceManager;

    define('dessert.application',['helpers/ajax-helper', 'helpers/property-helper', 'helpers/dom-helper', 'helpers/type-helper', 'dessert.controller', 'dessert.routemanager', 'dessert.httphandler', 'dessert.rendering', 'dessert.resourcemanager'], main);

    function main($Ajax, $PropertyHelper, $DomHelper, $TypeHelper, $Controller, $RouteManager, $HttpHandler, $Rendering, $ResourceManager) {
        ajax = $Ajax;
        Controller = $Controller;
        PropertyHelper = $PropertyHelper;
        RouteManager = $RouteManager;
        dom = $DomHelper;
        HttpHandler = $HttpHandler;
        Rendering = $Rendering;
        TypeHelper = $TypeHelper;
        ResourceManager = $ResourceManager;

        return Application;
    }

    var Application = function () {
        function Application(name) {
            _classCallCheck(this, Application);

            var CONTROLLERS = {};
            var ROUTE_MGR = new RouteManager();
            var HTTP_HANDLER = new HttpHandler();
            var COMPONENT_CACHE = {};
            var RESOURCE_CACHE = {};

            PropertyHelper.addReadOnlyProperties(this, [{
                name: 'name',
                value: name
            }]);

            setControllerMethods(this, CONTROLLERS);
            setRouteManagerMethods(this, ROUTE_MGR);
            setComponentCacheMethods(this, COMPONENT_CACHE);
            setRenderingMethods(this, CONTROLLERS, ROUTE_MGR, COMPONENT_CACHE, HTTP_HANDLER);
            setHttpHandlerMethods(this, HTTP_HANDLER);
            setResourceCacheMethods(this, RESOURCE_CACHE);
        }

        _createClass(Application, [{
            key: 'selector',
            get: function get() {
                return '[data-dsrt-app=' + this.name + ']';
            }
        }, {
            key: 'element',
            get: function get() {
                return document.querySelector(this.selector);
            }
        }, {
            key: 'page',
            get: function get() {
                return this.element.querySelector(Application.pageSelector);
            }
        }], [{
            key: 'pageSelector',
            get: function get() {
                return '[data-dsrt-page]';
            }
        }]);

        return Application;
    }();

    function setControllerMethods(instance, controllers) {
        instance.getController = function (name) {
            return controllers[name];
        };

        instance.controller = function controllerFactory(name, ctor) {
            var controller = controllers[name];

            if (!controller) {
                controller = new Controller(name, ctor);
                controllers[name] = controller;
            }

            return controller;
        };
    }

    function setRouteManagerMethods(instance, routeMgr) {
        instance.route = function (map) {
            if (TypeHelper.isObject(map)) {
                Object.keys(map).forEach(function (path) {
                    var viewMap = map[path];
                    Object.keys(viewMap).forEach(function (ctrlName) {
                        var view = viewMap[ctrlName];
                        instance.mapRoute(path, ctrlName, view);
                    });
                });
            }
        };

        instance.mapRoute = function (path, controllerName, view) {
            return routeMgr.route(path, controllerName, view);
        };

        instance.clearRoute = function (path) {
            return routeMgr.clearRoute(path);
        };
    }

    function setComponentCacheMethods(instance, componentCache) {
        instance.registerComponent = function (component) {
            return componentCache[component.name] = component;
        };
        instance.registerComponents = function (components) {
            components.forEach(instance.registerComponent);
        };

        instance.removeComponent = function (name) {
            return delete componentCache[name];
        };
    }

    function setRenderingMethods(instance, controllers, routeMgr, components, httpHandler) {
        instance.render = function render() {
            var path = RouteManager.cleanHash;
            var route = routeMgr.getRoute(path);

            if (route && route.view && route.controller) {
                var page = instance.page;
                var controller = controllers[route.controller];
                ResourceManager.loadResources(instance.resources()).then(function () {
                    ajax.get(route.view).then(function (html) {
                        dom.emptyElement(page);
                        var docFrag = dom.createDocFrag(html);
                        page.appendChild(docFrag);
                        var componentInstances = Rendering.renderComponents(instance, page, components, controller);
                        controller.init(page);
                    }).fail(function (xhr) {
                        var status = xhr.status;
                        httpHandler.fireHandlers(code, [status, xhr.statusText]);
                    });
                });
            } else {
                httpHandler.fireHandlers(404, ['Route not found for path ' + path]);
            }
        };
    }

    function setHttpHandlerMethods(instance, httpHandler) {
        instance.addHttpHandler = function (code, handler) {
            return httpHandler.addHandler(code, handler);
        };
        instance.getHttpHandlers = function (code) {
            return httpHandler.getHandlers(code);
        };
    }

    function setResourceCacheMethods(instance, resourceCache) {
        instance.resources = function resources(config) {
            if (config) {
                Object.assign(resourceCache, config);
            } else {
                return resourceCache;
            }
        };
    }
})();


(function () {

    'use strict';

    define('helpers/uuid',main);

    function main() {
        return uuid;
    }

    /**
     * Generates RFC4122 compliant UUIDs.
     * 
     * Credit: https://gist.github.com/jcxplorer/823878
     * 
     * @returns {String} The generated UUID.
     */
    function uuid() {
        var uuid = "",
            i,
            random;
        for (i = 0; i < 32; i++) {
            random = Math.random() * 16 | 0;

            if (i == 8 || i == 12 || i == 16 || i == 20) {
                uuid += "-";
            }
            uuid += (i == 12 ? 4 : i == 16 ? random & 3 | 8 : random).toString(16);
        }
        return uuid;
    }
})();
(function () {

    'use strict';

    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var PropertyHelper;
    var TypeHelper;
    var uuid;
    var ArrayHelper;

    define('dessert.behavior',['helpers/property-helper', 'helpers/type-helper', 'helpers/uuid', 'helpers/array-helper'], main);

    function main($PropertyHelper, $TypeHelper, $uuid, $ArrayHelper) {

        PropertyHelper = $PropertyHelper;
        TypeHelper = $TypeHelper;
        uuid = $uuid;
        ArrayHelper = $ArrayHelper;

        return Behavior;
    }

    var Behavior = function Behavior(name, action) {
        _classCallCheck(this, Behavior);

        var _listeners = [];

        PropertyHelper.addReadOnlyProperties(this, [{
            name: 'name',
            value: name
        }, {
            name: 'listeners',
            value: _listeners
        }]);

        addBehaviorMethods(this, _listeners);

        if (TypeHelper.isFunction(action)) {
            action(this);
        }
    };

    function addBehaviorMethods(instance, listeners) {
        instance.addListener = function (callback) {
            if (TypeHelper.isFunction(callback)) {
                var listenerId = uuid();
                listeners.push({
                    fn: callback,
                    id: listenerId
                });
            }
        };

        instance.removeListener = function (id) {
            return ArrayHelper.remove(listeners, function (l) {
                return l.id === id;
            });
        };

        instance.fire = function fire(args) {
            var fn = function fn(l) {
                return l.fn.apply(l, _toConsumableArray(args));
            };
            listeners.forEach(fn);
        };
    }
})();
(function () {

    'use strict';

    define('dessert.status',main);

    function main() {
        return {
            get NOT_FOUND() {
                return 404;
            }
        };
    }
})();
(function () {

    'use strict';

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var uuid;
    var PropertyHelper;
    var Behavior;
    var ResourceRequest;
    var Status;

    define('dessert.component',['helpers/uuid', 'helpers/property-helper', 'dessert.behavior', 'dessert.resourcerequest', 'dessert.status'], main);

    function main($uuid, $PropertyHelper, $Behavior, $ResourceRequest, $Status) {

        uuid = $uuid;
        PropertyHelper = $PropertyHelper;
        Behavior = $Behavior;
        ResourceRequest = $ResourceRequest;
        Status = $Status;

        return Component;
    }

    var Component = function () {
        function Component(app, state, element, id) {
            _classCallCheck(this, Component);

            PropertyHelper.addReadOnlyProperties(this, [{
                name: 'instanceId',
                value: uuid()
            }, {
                name: 'id',
                value: id
            }, {
                name: 'state',
                value: state
            }]);

            addElementMethods(this, element);
            addBehaviorMethods(this);
            addResourceMethods(this, app);
        }

        /**
         * @abstract
         * @instance
         */


        _createClass(Component, [{
            key: 'render',


            /** 
             * @abstract
             * @instance
             */
            value: function render() {}

            /**
             * @abstract
             * @instance
             * @param {Element} element The DOM element that represents this component.
             */

        }, {
            key: 'api',
            value: function api(element) {}

            /**
             * @abstract
             * @instance
             */

        }, {
            key: 'init',
            value: function init(element) {
                this.api(element);
            }

            /**
             * @abstract
             * @virtual
             * @instance
             */

        }, {
            key: 'destroy',
            value: function destroy() {
                this.cleanupEventListeners();
            }
        }], [{
            key: 'resource',


            /**
             * @static
             * @param {String} name The name of the resource.
             */
            value: function resource(name) {
                return new ResourceRequest(name);
            }
        }, {
            key: 'name',
            get: function get() {}
        }]);

        return Component;
    }();

    function addBehaviorMethods(instance) {
        var behaviors = {};

        var describe = function describe(name, action) {
            behaviors[name] = new Behavior(name, action);
        };

        var fire = function fire(name, args) {
            var behavior = behaviors[name];

            if (behavior) {
                behavior.fire(args);
            }
        };

        var when = function when(name, action) {
            var behavior = behaviors[name];

            if (behavior) {
                behavior.addListener(action);
            }
        };

        PropertyHelper.addReadOnlyProperties(instance, [{
            name: 'describe',
            value: describe
        }, {
            name: 'fire',
            value: fire
        }, {
            name: 'when',
            value: when
        }]);
    }

    function addElementMethods(instance, element) {
        var cleanupEventListeners = function cleanupEventListeners() {
            var clone = element.cloneNode(true);
            element.parentNode.replaceChild(clone, element);
            clone.remove();
        };

        PropertyHelper.addReadOnlyProperties(instance, [{
            name: 'cleanupEventListeners',
            value: cleanupEventListeners
        }]);
    }

    function addResourceMethods(instance, app) {
        instance.requestResource = function requestResource(resourceName) {
            var resource = app.resources()[resourceName];

            if (resource) {
                return resource.content;
            } else {
                return Status.NOT_FOUND;
            }
        };
    }
})();
(function () {

    'use strict';

    var Application;
    var EventHelper;
    var $Promise;

    define('dessert.core',['helpers/event-helper', 'helpers/promise', 'dessert.application', 'dessert.component'], main);

    var APP_CACHE = {};
    var DESSERT = {
        app: appFactory,
        promise: promiseFactory
    };

    function main($EventHelper, _Promise, $Application) {
        Application = $Application;
        EventHelper = $EventHelper;
        $Promise = _Promise;

        initEvents();

        return DESSERT;
    };

    function appFactory(name) {
        var app = APP_CACHE[name];

        if (!app) {
            app = new Application(name);
            APP_CACHE[name] = app;
        }

        return app;
    }

    function initEvents() {
        EventHelper.initHashChange(onHashChange);
    }

    function onHashChange() {
        Object.keys(APP_CACHE).map(function (k) {
            return APP_CACHE[k];
        }).forEach(function (app) {
            return app.render();
        });
    }

    function promiseFactory() {
        return new $Promise();
    }
})();
